version: '2.4'

services:

  ## Jenkins infrastructure ##

  # Jenkins
  jenkins:
    container_name: jenkins
    build: ./master
    image: jenkins_casc
    environment:
      - CASC_JENKINS_CONFIG=/var/jenkins_casc/jenkins.yaml
      - SECRETS=/var/jenkins_casc/secrets 
    ports:
      - "8080:8080"
    volumes:
      - jenkins_master_home:/var/jenkins_home

  # Jenkins Slave
  jenkins_slave_docker:
    container_name: jenkins_agent_docker
    build: ./agent
    image: jenkins_agent_docker
    init: true
    environment:
      - DOCKER_CERT_PATH=/certs/client
      - DOCKER_HOST=tcp://docker:2376
      - DOCKER_TLS_VERIFY=1
    env_file:
      - agent/env_file
    restart: on-failure
    depends_on:
      - jenkins
    volumes:
      - jenkins-docker-certs:/certs/client:ro
      - jenkins_slave_docker_workdir:/home/jenkins:z
      - jenkins_slave_docker:/home/jenkins/.jenkins

  # Jenkins Slave with docker
  docker:
    container_name: docker
    image: docker:dind
    command: ["--insecure-registry=proxy:8080"]
    environment:
      - DOCKER_TLS_CERTDIR=/certs
    volumes:
      - jenkins-docker-certs:/certs/client
      - jenkins_slave_docker_workdir:/home/jenkins:z
    privileged: true


  ## rocketchat infrastructure ##

  # rocketchat 
  rocketchat:
    image: rocketchat/rocket.chat:3.11.1
    command: >
      bash -c
        "for i in `seq 1 30`; do
          node main.js &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    restart: unless-stopped
    volumes:
      - ./data/rocketchat/uploads:/app/uploads
    environment:
      - PORT=3000
      - ROOT_URL=http://localhost:3001
      - MONGO_URL=mongodb://mongo:27017/rocketchat
      - MONGO_OPLOG_URL=mongodb://mongo:27017/local
      - MAIL_URL=smtp://smtp.email
      - OVERWRITE_SETTING_Show_Setup_Wizard=completed
      - ADMIN_EMAIL=test@puzzle.ch
      - ADMIN_USERNAME=admin
      - ADMIN_PASS=admin
    depends_on:
      - mongo
    ports:
      - 3000:3000
    labels:
      - "traefik.backend=rocketchat"
      - "traefik.frontend.rule=Host: your.domain.tld"

  # rocketchat db
  mongo:
    image: mongo:4.4
    restart: unless-stopped
    volumes:
     - ./data/rocketchat/db:/data/db
    command: mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1
    labels:
      - "traefik.enable=false"

  # this container's job is just run the command to initialize the replica set.
  # it will run the command and remove himself (it will not stay running)
  mongo-init-replica:
    image: mongo:4.4
    command: >
      bash -c
        "for i in `seq 1 30`; do
          mongo mongo/rocketchat --eval \"
            rs.initiate({
              _id: 'rs0',
              members: [ { _id: 0, host: 'localhost:27017' } ]})\" &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    depends_on:
      - mongo

  # hubot, the popular chatbot (add the bot user first and change the password before starting this image)
  hubot:
    image: rocketchat/hubot-rocketchat:latest
    restart: unless-stopped
    environment:
      - ROCKETCHAT_URL=rocketchat:3000
      - ROCKETCHAT_ROOM=GENERAL
      - ROCKETCHAT_USER=bot
      - ROCKETCHAT_PASSWORD=botpassword
      - BOT_NAME=bot
  # you can add more scripts as you'd like here, they need to be installable by npm
      - EXTERNAL_SCRIPTS=hubot-help,hubot-seen,hubot-links,hubot-diagnostics
      - ADMIN_USERNAME=admin
      - ADMIN_PASS=admin
    depends_on:
      - rocketchat
    labels:
      - "traefik.enable=false"
    volumes:
      - ./data/rocketchat/scripts:/home/hubot/scripts
    # this is used to expose the hubot port for notifications on the host on port 3001, e.g. for hubot-jenkins-notifier
    ports:
      - 3001:8080


volumes:
  jenkins_master_home:
  jenkins_slave_docker:
  jenkins-docker-certs:
  jenkins_slave_docker_workdir:
